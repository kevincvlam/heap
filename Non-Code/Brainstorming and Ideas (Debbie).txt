/_DATA TYPES/STRUCTURES________/


COURSES TABLE
- to determine order of viewing
- stable sorted by:
	- year of the course -> number of TAs >=willing to TA course

RANKING TABLE
- Deals with the constraint that TAs are to be comfortable with the material of the course they're teaching
- Table of possibilities based on qualifications; array of vectors

       course          1       2       3       4       . . .
       _____________________________________________________
       qualified TA 1  |_|     |_|     |_|     |_|
       qualified TA 2  |_|     |_|     |_|     |_|
       qualified TA 3  |_|     |_|     |_|     |_|
       qualified TA 4  |_|     |_|     |_|     |_|
       qualified TA 5          |_|     |_|     |_|
       qualified TA 6          |_|             |_|
               .
               .
               .

  - begins with a vector containing ALL TAs, then cross possible TA's out based on given qualifications
  - within the vector, the options are ranked in order of quality most qualified ---> least qualified (based on the given 0, 1, 2" info)
  - TAs stable sorted by:
	- gaurantee -> preference -> level -> qualification score

TASHIPS TABLE
- Deals with contraint that there is a minimum of 2.5hr/enrolment and maximum of 2*minimum enrolment
- 2 dimensional array indicating the minimum number of TAships a course requires

       course          1       2       3       4       . . .
       _____________________________________________________
       #TAships req'd          3       7       5       9

ASSIGNMENT TABLE
- Deals with hours guanranteed/TA
- Validity is checked with verify

       course          1       2       3       4       . . .
       _____________________________________________________
       TAship 1        |_|     |_|     |_|     |_|
       TAship 2        |_|     |_|     |_|     |_|
       TAship 3        |_|     |_|     |_|     |_|
       TAship 4        |_|     |_|     |_|     |_|
       TAship 5        |_|     |_|     |_|     |_|
       TAship 6                |_|     |_|     |_|
       TAship 7                |_|             |_|
       TAship 8                                |_|
        .
        .
        .

  - number of TAships cannot be less than the number of indicated in HOUR/ENROLMENT TABLE
  - number of TAships cannot exceed the number for the course
  - the frequency of a TA's name in this table cannot exceed the maximum number prescribed
  - the frequency of a TA's name cannot be less than the number guaranteed


/_FUNCTIONS________________/

VERIFY(main table)

- returns true is nothing is blatantly incorrect
       - empty table would return true
       - table is "printed" only if the number of empty boxes is 0 AND verify returns true
- returns false if
       - a TA is unqualfied in the course
       - the number of guaranteed hours doesn't match what they got
       - TAship/enrolment ranges to high or is below minimum

SOLVE(main table) [OPTION 1, based on sudoku/zebra methods]

- process:
       - heuristics (qualifications, prof interest, etc.)
	       - most constrained TA (gauranteed + not versatile)
       - brute force
               - add first ranked TA to a course
               - if (verify == true && num empty == 0) print table
               - once table is seen, scanf variable asks if user is satisfied
               - if so, exit program
       - backtracking
               - if verify is false || user is not satisfied
               - remove most brute force recent addition and try again

SOLVE [OPTION 2, based on heap methods]
     - make list of priority of courses (perhaps by year of study?)
     - view TA rankings for courses in the order of list above
       - for every course, take the first TAships[code] number of TAs
            - for every TA that is taken for the course, subtract 54 hours from TAshipsOwed
             - update rankings based on TAs that have been taken for the course
     - if courses all have at least TAships[code] number of TAs
       - [option 1] look at the course with the smallest TA:enrolment ratio and see if the next TA in rank has a guarantee
              - if they do, assign them
              - if not, continue to course with next lowest TA:enrolment, (TA:enrolment must be recaculated after every assignment)
       - [option 2] for every TA who still has a guarantee after this
              - look at the top 3 preferences, and assign them to the course out of those three that have the lowest TA:enrolment
     - if all TAs with guarantees have been assigned and maxTA:enrolment > 2*minTA:enrolment
              - while maxTA:enrolment > 2*minTA:enrolment, assign next TA in ranking for the course with minTA:enrolment