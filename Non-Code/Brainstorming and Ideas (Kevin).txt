Brainstorming and Ideas:
Week of July 6
-Since the constraints are prioritized, perhaps we can use a sort of radix sort idea. Sorting from Least Significant to Most. 
-when we generate the ranked list of candidates, are we going to make it such that is someone eg. John is 1st on one course, he cannot be 1st on another. That is, would all the number one candidates correspond together into a recommended selection?
-store data in database fusing an object relational mapping software, perhaps with Java?
prioritize courses too, eg. the 4th year courses get candidates chosen first
-for the inital draft program should we only store the descriptors we are going to process, i think we can just store everrything and then process a small number of them for now.

Week of July 13
-We need to be able to input TA assignments for evaluations, ie to test if all
the TAships owed are fulfilleds
-each TA needs an ID
-perhaps courses can be a struct as well, so they have an ID descriptor

-both TAs and COURSES stored in our program as arrays so that we can iterate through them

August 3 2010

1.Fitness Function

-Given an assignment how do we evaluate its effectiveness?
-Add the percentage of guaranteed hours fulfilled ie 85(%)*(num_TAs/10)
-For each TA assigned that is 
    -1st +25
    -2nd +15
    -3rd +10
    -will +5
    -unwill 0
-Are the TAships evenly distributed?

-Subtract (Maximum.TA:enrollment - Minimum.TA:enrollment)

Whatelse makes a good assignment?



3.Course Structure

Need to identify which courses are most constrained.

-Store number of TAs who have Pref as 1st.. 2nd... 3rd.. will ..
-Store number of TAS who only have this course listed as 1st? 
-THe number of TAships needed (this may or may not influence constraint?)
-The year of the course(4th > 3rd > 2nd > 1st)
-a constraint score, that is updated as we make assignments ? 

 
2.Decision Making
How do we break at points where decisions are made? 

Is it possible for courses to have assignments that are 100% correct? 


3.Recursive 

int solve(emptyAssignment) //recurse through the possible assignments
{
    if(solution below certain fitness) {return 0;}

    if(solution is of certain fitness) {saveassignment; return 1;}

    //make an assignment of some sort
    assign TA to most constrained course
    remove TA from set of possibilities in that course

    if(solve(assignment)
    {
        printAssignment
        return 1;     
    }
    return 0;
}
